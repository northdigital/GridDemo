{
  "definitions": {
    "content": {
      "type": "array",
      "description": "An array of configurations for items that will be created as children of this item",
      "minItems": 1,
      "items": {
        "type": "object",
        "required": [
          "type",
          "componentName",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "row",
              "column",
              "stack",
              "component",
              "react-component"
            ],
            "description": "The type of the item. Possible values are 'row', 'column', 'stack', 'component' and 'react-component'"
          },
          "componentName": {
            "type": "string",
            "description": "The name of the component as specified in layout.registerComponent. Mandatory if type is 'component'"
          },
          "componentState": {
            "type": "object",
            "description": "A serialisable object. Will be passed to the component constructor function and will be the value returned by container.getState()"
          },
          "id": {
            "type": "string",
            "description": "A String or an Array of Strings. Used to retrieve the item using item.getItemsById()"
          },
          "width": {
            "type": "integer",
            "description": "The width of this item, relative to the other children of its parent in percent"
          },
          "height": {
            "type": "integer",
            "description": "The height of this item, relative to the other children of its parent in percent"
          },
          "isClosable": {
            "type": "boolean",
            "description": "Determines if the item is closable. If false, the x on the items tab will be hidden and container.close() will return false"
          },
          "title": {
            "type": "string",
            "description": "The title of the item as displayed on its tab and on popout windows"
          },
          "activeItemIndex": {
            "type": "integer",
            "description": "The index of the initially selected tab"
          },
          "content": {
            "$ref": "#/definitions/content"
          }
        },
        "additionalProperties": false
      }
    },
    "settings": {
      "type": "object",
      "properties": {
        "hasHeaders": {
          "type": "boolean",
          "description": "Turns headers on or off. If false, the layout will be displayed with splitters only"
        },
        "constrainDragToContainer": {
          "type": "boolean",
          "description": "Constrains the area in which items can be dragged to the layout's container. Will be set to false automatically when layout.createDragSource() is called"
        },
        "reorderEnabled": {
          "type": "boolean",
          "description": "If true, the user can re-arrange the layout by dragging items by their tabs to the desired location"
        },
        "selectionEnabled": {
          "type": "boolean",
          "description": "If true, the user can select items by clicking on their header. This sets the value of layout.selectedItem to the clicked item, highlights its header and the layout emits a 'selectionChanged' event"
        },
        "popoutWholeStack": {
          "type": "boolean",
          "description": "Decides what will be opened in a new window if the user clicks the popout icon. If true the entire stack will be transferred to the new window, if false only the active component will be opened."
        },
        "blockedPopoutsThrowError": {
          "type": "boolean",
          "description": "Specifies if an error is thrown when a popout is blocked by the browser (e.g. by opening it programmatically). If false, the popout call will fail silently"
        },
        "closePopoutsOnUnload": {
          "type": "boolean",
          "description": "Specifies if all popouts should be closed when the page that created them is closed. Popouts don't have a strong dependency on their parent and can exist on their own, but can be quite annoying to close by hand. In addition, any changes made to popouts won't be stored after the parent is closed"
        },
        "showPopoutIcon": {
          "type": "boolean",
          "description": "Specifies if the popout icon should be displayed in the header-bar"
        },
        "showMaximiseIcon": {
          "type": "boolean",
          "description": "Specifies if the maximise icon should be displayed in the header-bar"
        },
        "showCloseIcon": {
          "type": "boolean",
          "description": "Specifies if the close icon should be displayed in the header-bar"
        }
      }
    },
    "dimensions": {
      "type": "object",
      "properties": {
        "borderWidth": {
          "type": "integer",
          "description": "The width of the borders between the layout items in pixel. Please note: The actual draggable area is wider than the visible one, making it safe to set this to small values without affecting usability"
        },
        "minItemHeight": {
          "type": "integer",
          "description": "The minimum height an item can be resized to (in pixel)"
        },
        "minItemWidth": {
          "type": "integer",
          "description": "The minimum width an item can be resized to (in pixel)"
        },
        "headerHeight": {
          "type": "integer",
          "description": "The height of the header elements in pixel. This can be changed, but your theme's header css needs to be adjusted accordingly"
        },
        "dragProxyWidth": {
          "type": "integer",
          "description": "The width of the element that appears when an item is dragged (in pixel)"
        },
        "dragProxyHeight": {
          "type": "integer",
          "description": "The height of the element that appears when an item is dragged (in pixel)"
        }
      }
    }
  },
  "type": "object",
  "required": [
    "content"
  ],
  "properties": {
    "settings": {
      "$ref": "#/definitions/settings"
    },
    "content": {
      "$ref": "#/definitions/content"
    },
    "dimensions": {
      "$ref": "#/definitions/dimensions"
    }
  },
  "additionalProperties": false
}